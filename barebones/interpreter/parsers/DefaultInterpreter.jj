/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.6";
}
PARSER_BEGIN(DefaultInterpreter)
package barebones.interpreter.parsers;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

import java.util.HashMap;

import barebones.concept.Concept;
import barebones.concept.DirectionConcept;
import barebones.concept.IdentifierConcept;
import barebones.concept.ItemConcept;
import barebones.concept.FeatureConcept;
import barebones.concept.StatementConcept;
import barebones.concept.PersonConcept;
import barebones.concept.AmbiguousConcept;

import barebones.event.UserCommand;
import barebones.event.GetInventoryCommand;
import barebones.event.MoveCommand;
import barebones.event.GetTimeCommand;
import barebones.event.QuitCommand;
import barebones.event.SaveCommand;
import barebones.event.RestoreCommand;
import barebones.event.DropCommand;
import barebones.event.OpenCommand;
import barebones.event.TakeCommand;
import barebones.event.ExamineCommand;
import barebones.event.PushCommand;
import barebones.event.PullCommand;
import barebones.event.SayCommand;

import barebones.world.object.Room;

public class DefaultInterpreter {
  public static void main(String args[]) throws ParseException {
    DefaultInterpreter parser = null;
    while (true) {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		String input = "";
		try {
			input = reader.readLine();
		}
		catch(IOException ioe) {
			System.out.println("Could not read input");
		}
		ByteArrayInputStream bastream = new ByteArrayInputStream(input.getBytes());

		if (null == parser)
		    parser = new DefaultInterpreter(bastream);
		else
			parser.ReInit(bastream);
  
      try {
        UserCommand cmd = parser.interpret();
        System.out.println(cmd.toString());
      } catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        parser.ReInit(System.in);
      } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}
PARSER_END(DefaultInterpreter)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
}

TOKEN : /* commands */
{
  < MOVE_CMD: "go" >
| < INV_CMD: "i"("n"("v"("e"("n"("t"("o"("r"("y")?)?)?)?)?)?)?)? >
| < TIME_CMD: "ti"("m"("e")?)? >
| < QUIT_CMD: "q"("u"("i"("t")?)?)? >
| < SAVE_CMD: "sa"("v"("e")?)? >
| < REST_CMD: "r"("e"("s"("t"("o"("r"("e")?)?)?)?)?)?|"l"("o"("a"("d")?)?)? >
| < DROP_CMD: "dr"("o"("p")?)? >
| < OPEN_CMD: "o"("p"("e"("n")?)?)? >
| < TAKE_CMD: "ta"("k"("e")?)? >
| < EXAM_CMD: "ex"("a"("m"("i"("n"("e")?)?)?)?)? >
| < PUSH_CMD: "pus"("h")? >
| < PULL_CMD: "pul"("l")? >
| < SAY_CMD: "say" >}

TOKEN : /* targets */
{ 	< NDIR: "n"("o"("r"("t"("h")?)?)?)? >
| 	< SDIR: "s"("o"("u"("t"("h")?)?)?)? >
| 	< EDIR: "e"("a"("s"("t")?)?)? >
| 	< WDIR: "w"("e"("s"("t")?)?)? >
| 	< UDIR: "u"("p")? >
| 	< DDIR: "d"("o"("w"("n")?)?)? >
| 	< ITEM_WORD: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z"])+ >
|  	< ID_CONCEPT: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])+ >
}

TOKEN : /* GRAMMAR */
{  < DOOR_TO_THE: "door to the" >
}

TOKEN : /* OPERATORS */
{
	< PLUS: "+" >
|	< MINUS: "-" >
|	< MULTIPLY: "*" >
|	< DIVIDE: "/" >
}
TOKEN :
{
    < CONSTANT: ( <DIGIT> )+ >
|   < #DIGIT: ["0" - "9"] >
}

UserCommand interpret() :
{
  	Concept c;
	DirectionConcept mvDir;
	IdentifierConcept id;
	ItemConcept item;
	FeatureConcept feature;
	StatementConcept statement;
}{
  LOOKAHEAD(2)
  mvDir=move()  {    return new MoveCommand(mvDir);
  }
| inventory()
  {  	return new GetInventoryCommand();
  }
| time()
  {
    return new GetTimeCommand();  }
| quit()
  {
    return new QuitCommand();  }
| id=save()
  {
    return new SaveCommand(id);  }
| id=restore()
  {  	return new RestoreCommand(id);
  }
| item=drop()
  {
    return new DropCommand(item);  }
| c=open()
  {
    if (ItemConcept.class.isInstance(c)) return new OpenCommand((ItemConcept)c);
    else return new OpenCommand((DirectionConcept)c);  }
| item=take()
  { 	return new TakeCommand(item); 
  }
| c=examine()
  {
    if (null == c) return new ExamineCommand();
    else if (DirectionConcept.class.isInstance(c)) return new ExamineCommand((DirectionConcept)c);	else return new ExamineCommand(new AmbiguousConcept(c));
  }
| feature=push()
  {
    return new PushCommand(feature);  }
| feature=pull()
  {
    return new PullCommand(feature);
  }
| statement=say()
  {
    return new SayCommand(statement);  }
}

DirectionConcept dir() :{}
{	< NDIR > { return DirectionConcept.N; }
| < SDIR > { return DirectionConcept.S; }| < EDIR > { return DirectionConcept.E; }| < WDIR > { return DirectionConcept.W; }
| < UDIR > { return DirectionConcept.U; }
| < DDIR > { return DirectionConcept.D; }
}

String dirText() :
{
  Token t;}
{
  t=< NDIR > { return Room.NORTH; }
| t=< SDIR > { return Room.SOUTH; }
| t=< EDIR > { return Room.EAST; }
| t=< WDIR > { return Room.WEST; }
| t=< UDIR > { return Room.UP; }
| t=< DDIR > { return Room.DOWN; }
}

Concept id() :
{
  Token t;
  Concept c;
}
{
  t=< ID_CONCEPT > { return new IdentifierConcept(t.image); }
| t=< ITEM_WORD > { return new IdentifierConcept(t.image); }
| c=dir() { return c; }
}

String rawText() :
{
  Token t;
  String text;
}
{
  t=< ITEM_WORD > { return t.image; }
| text=dirText() { return text; }
}

String sentence() :
{
  StringBuffer termimage = new StringBuffer();
  String s;
}
{
  s=rawText()
  {
	termimage.append(s);
  }
  (
    s=rawText()
    {
        termimage.append(" ");
		termimage.append(s);
    }
  )*
{
  return termimage.toString();
}
}

ItemConcept item() :
{
  String sentence;
}
{
  sentence = sentence()  {
    return new ItemConcept(sentence);
  }}


Concept dirOrItem() :
{
  DirectionConcept dir;
  ItemConcept item;}
{
  LOOKAHEAD(2)
  dir=dir()  {    return dir;
  }
|
  item=item()
  {	return item;
  }}

DirectionConcept move() :
{
    DirectionConcept mvDir;
}
{
  [< MOVE_CMD >] mvDir=dir()  {
    return mvDir;  }
}

void inventory() : {}
{	< INV_CMD >
}

void time() : {}
{	< TIME_CMD >
}

void quit() : {}{
	< QUIT_CMD >
}

IdentifierConcept save() :
{
  	Concept concept;
}
{
  < SAVE_CMD > concept=id()  {
    if (concept instanceof IdentifierConcept)
	    return (IdentifierConcept)concept;
	else
		return null;  }}

IdentifierConcept restore() :
{
  	Concept concept;}
{
  < REST_CMD > concept=id()
  {
    if (concept instanceof IdentifierConcept)		return (IdentifierConcept)concept;
	else
		return null;
  }}

ItemConcept drop() :
{
  ItemConcept item;}
{
  < DROP_CMD > item=item()  {    return item;
  }}

Concept open_object() :
{  Concept c;
}
{
< DOOR_TO_THE > c=dir()
  {
    return c;
  }
|
  c=dirOrItem()
  {
    return c;
  }}

Concept open() :
{
  Concept c;
  DirectionConcept dir;
  ItemConcept item;}
{
  < OPEN_CMD > c=open_object()
  {    return c;
  }
}

ItemConcept take() :
{  ItemConcept item;
}
{
  < TAKE_CMD > item=item()
  {	return item;
  }}

FeatureConcept push() :
{
  String sentence;
  FeatureConcept feature;}
{
  < PUSH_CMD > sentence=sentence()  {
    return new FeatureConcept(sentence);  }}

FeatureConcept pull() :
{
  String sentence;
  FeatureConcept feature;
}
{
  < PULL_CMD > sentence=sentence()
  {
    return new FeatureConcept(sentence);
  }
}

StatementConcept say() :
{
  String sentence;
  StatementConcept statement;
}
{
  < SAY_CMD > sentence=sentence()
  {
    return new StatementConcept(sentence);
  }
}


Concept examine() :
{
  ItemConcept item=null;}
{	< EXAM_CMD >
	[
		item=item()
	]
	{
	  DirectionConcept dc = DirectionConcept.instance(item.toString());
	  if (null == dc)
	  	return new AmbiguousConcept(item,
	  		new FeatureConcept(item.toString()),
	  		new PersonConcept(item.toString()));
	  else
	  	return dc;
	}
}

int one_line() : {}
{
  sum() ";" { return 0; }
| ";"	    { return 1; }
}
void sum() : {}
{
  term() (( <PLUS> | <MINUS> ) term())*
}
void term() : {}
{
  unary() (( <MULTIPLY> | <DIVIDE> ) unary())*
}
void unary() : {}
{
  <MINUS> element()
 | element()
}
void element() : {}
{
  <CONSTANT>
| "(" sum() ")"
}
