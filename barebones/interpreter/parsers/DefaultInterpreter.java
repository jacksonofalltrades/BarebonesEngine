/* Generated By:JavaCC: Do not edit this line. DefaultInterpreter.java */
package barebones.interpreter.parsers;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

import barebones.concept.Concept;
import barebones.concept.DirectionConcept;
import barebones.concept.IdentifierConcept;
import barebones.concept.ItemConcept;
import barebones.concept.FeatureConcept;
import barebones.concept.AmbiguousConcept;

import barebones.event.UserCommand;
import barebones.event.GetInventoryCommand;
import barebones.event.MoveCommand;
import barebones.event.GetTimeCommand;
import barebones.event.QuitCommand;
import barebones.event.SaveCommand;
import barebones.event.RestoreCommand;
import barebones.event.DropCommand;
import barebones.event.OpenCommand;
import barebones.event.TakeCommand;
import barebones.event.ExamineCommand;

@SuppressWarnings("all")
public class DefaultInterpreter implements DefaultInterpreterConstants {
  public static void main(String args[]) throws ParseException {
    DefaultInterpreter parser = null;
    while (true) {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \u005c"1+(2+3)*4;\u005c" :");
                BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
                String input = "";
                try {
                        input = reader.readLine();
                }
                catch(IOException ioe) {
                        System.out.println("Could not read input");
                }
                ByteArrayInputStream bastream = new ByteArrayInputStream(input.getBytes());

                if (null == parser)
                    parser = new DefaultInterpreter(bastream);
                else
                        parser.ReInit(bastream);

      try {
        UserCommand cmd = parser.interpret();
        System.out.println(cmd.toString());
      } catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        DefaultInterpreter.ReInit(System.in);
      } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public UserCommand interpret() throws ParseException {
        Concept c;
        DirectionConcept mvDir;
        IdentifierConcept id;
        ItemConcept item;
        AmbiguousConcept ac;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOVE_CMD:
    case NDIR:
    case SDIR:
    case EDIR:
    case WDIR:
    case UDIR:
    case DDIR:
      mvDir = move();
    {if (true) return new MoveCommand(mvDir);}
      break;
    case INV_CMD:
      inventory();
        {if (true) return new GetInventoryCommand();}
      break;
    case TIME_CMD:
      time();
    {if (true) return new GetTimeCommand();}
      break;
    case QUIT_CMD:
      quit();
    {if (true) return new QuitCommand();}
      break;
    case SAVE_CMD:
      id = save();
    {if (true) return new SaveCommand(id);}
      break;
    case REST_CMD:
      id = restore();
        {if (true) return new RestoreCommand(id);}
      break;
    case DROP_CMD:
      item = drop();
    {if (true) return new DropCommand(item);}
      break;
    case OPEN_CMD:
      c = open();
    if (ItemConcept.class.isInstance(c)) {if (true) return new OpenCommand((ItemConcept)c);}
    else {if (true) return new OpenCommand((DirectionConcept)c);}
      break;
    case TAKE_CMD:
      item = take();
        {if (true) return new TakeCommand(item);}
      break;
    case EXAM_CMD:
      ac = examine();
    if (null == ac) {if (true) return new ExamineCommand();}
        else {if (true) return new ExamineCommand(ac);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public DirectionConcept dir() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NDIR:
      jj_consume_token(NDIR);
                   {if (true) return DirectionConcept.N;}
      break;
    case SDIR:
      jj_consume_token(SDIR);
             {if (true) return DirectionConcept.S;}
      break;
    case EDIR:
      jj_consume_token(EDIR);
             {if (true) return DirectionConcept.E;}
      break;
    case WDIR:
      jj_consume_token(WDIR);
             {if (true) return DirectionConcept.W;}
      break;
    case UDIR:
      jj_consume_token(UDIR);
             {if (true) return DirectionConcept.U;}
      break;
    case DDIR:
      jj_consume_token(DDIR);
             {if (true) return DirectionConcept.D;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String dirText() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NDIR:
      t = jj_consume_token(NDIR);
               {if (true) return t.image;}
      break;
    case SDIR:
      t = jj_consume_token(SDIR);
               {if (true) return t.image;}
      break;
    case EDIR:
      t = jj_consume_token(EDIR);
               {if (true) return t.image;}
      break;
    case WDIR:
      t = jj_consume_token(WDIR);
               {if (true) return t.image;}
      break;
    case UDIR:
      t = jj_consume_token(UDIR);
               {if (true) return t.image;}
      break;
    case DDIR:
      t = jj_consume_token(DDIR);
               {if (true) return t.image;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierConcept id() throws ParseException {
  Token t;
  String dir;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_CONCEPT:
      t = jj_consume_token(ID_CONCEPT);
                     {if (true) return new IdentifierConcept(t.image);}
      break;
    case ITEM_WORD:
      t = jj_consume_token(ITEM_WORD);
                    {if (true) return new IdentifierConcept(t.image);}
      break;
    case NDIR:
    case SDIR:
    case EDIR:
    case WDIR:
    case UDIR:
    case DDIR:
      dir = dirText();
                  {if (true) return new IdentifierConcept(dir);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String itemText() throws ParseException {
  Token t;
  String text;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ITEM_WORD:
      t = jj_consume_token(ITEM_WORD);
                    {if (true) return t.image;}
      break;
    case NDIR:
    case SDIR:
    case EDIR:
    case WDIR:
    case UDIR:
    case DDIR:
      text = dirText();
                   {if (true) return text;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ItemConcept item() throws ParseException {
  StringBuffer termimage = new StringBuffer();
  String s;
    s = itemText();
        termimage.append(s);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NDIR:
      case SDIR:
      case EDIR:
      case WDIR:
      case UDIR:
      case DDIR:
      case ITEM_WORD:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
      s = itemText();
        termimage.append(" ");
                termimage.append(s);
    }
  {if (true) return new ItemConcept(termimage.toString());}
    throw new Error("Missing return statement in function");
  }

  static final public DirectionConcept move() throws ParseException {
    DirectionConcept mvDir;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOVE_CMD:
      jj_consume_token(MOVE_CMD);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    mvDir = dir();
    {if (true) return mvDir;}
    throw new Error("Missing return statement in function");
  }

  static final public void inventory() throws ParseException {
    jj_consume_token(INV_CMD);
  }

  static final public void time() throws ParseException {
    jj_consume_token(TIME_CMD);
  }

  static final public void quit() throws ParseException {
    jj_consume_token(QUIT_CMD);
  }

  static final public IdentifierConcept save() throws ParseException {
    IdentifierConcept saveId;
    jj_consume_token(SAVE_CMD);
    saveId = id();
    {if (true) return saveId;}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierConcept restore() throws ParseException {
        IdentifierConcept restId;
    jj_consume_token(REST_CMD);
    restId = id();
        {if (true) return restId;}
    throw new Error("Missing return statement in function");
  }

  static final public ItemConcept drop() throws ParseException {
  ItemConcept item;
    jj_consume_token(DROP_CMD);
    item = item();
    {if (true) return item;}
    throw new Error("Missing return statement in function");
  }

  static final public Concept open() throws ParseException {
  DirectionConcept dir;
  ItemConcept item;
    jj_consume_token(OPEN_CMD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NDIR:
    case SDIR:
    case EDIR:
    case WDIR:
    case UDIR:
    case DDIR:
      dir = dir();
    {if (true) return dir;}
      break;
    case ITEM_WORD:
      item = item();
    {if (true) return item;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ItemConcept take() throws ParseException {
  ItemConcept item;
    jj_consume_token(TAKE_CMD);
    item = item();
        {if (true) return item;}
    throw new Error("Missing return statement in function");
  }

  static final public AmbiguousConcept examine() throws ParseException {
  ItemConcept item=null;
    jj_consume_token(EXAM_CMD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NDIR:
    case SDIR:
    case EDIR:
    case WDIR:
    case UDIR:
    case DDIR:
    case ITEM_WORD:
      item = item();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
          if (null == item)
                {if (true) return null;}
          else
                {if (true) return new AmbiguousConcept(item, new FeatureConcept(item.toString()));}
    throw new Error("Missing return statement in function");
  }

  static final public int one_line() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case CONSTANT:
    case 30:
      sum();
      jj_consume_token(29);
              {if (true) return 0;}
      break;
    case 29:
      jj_consume_token(29);
              {if (true) return 1;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void sum() throws ParseException {
    term();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      term();
    }
  }

  static final public void term() throws ParseException {
    unary();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      unary();
    }
  }

  static final public void unary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      element();
      break;
    case CONSTANT:
    case 30:
      element();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void element() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
      jj_consume_token(CONSTANT);
      break;
    case 30:
      jj_consume_token(30);
      sum();
      jj_consume_token(31);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public DefaultInterpreterTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1fffe0,0x1f8000,0x1f8000,0x7f8000,0x3f8000,0x3f8000,0x20,0x3f8000,0x3f8000,0x69000000,0x1800000,0x1800000,0x6000000,0x6000000,0x49000000,0x48000000,};
   }

  /** Constructor with InputStream. */
  public DefaultInterpreter(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DefaultInterpreter(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DefaultInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DefaultInterpreter(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DefaultInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DefaultInterpreter(DefaultInterpreterTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DefaultInterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[32];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
