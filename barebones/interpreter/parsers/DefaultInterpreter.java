/* Generated By:JavaCC: Do not edit this line. DefaultInterpreter.java */
package barebones.interpreter.parsers;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

import java.util.HashMap;

import barebones.concept.Concept;
import barebones.concept.DirectionConcept;
import barebones.concept.IdentifierConcept;
import barebones.concept.ItemConcept;
import barebones.concept.FeatureConcept;
import barebones.concept.StatementConcept;
import barebones.concept.PersonConcept;
import barebones.concept.AmbiguousConcept;

import barebones.event.UserCommand;
import barebones.event.GetInventoryCommand;
import barebones.event.MoveCommand;
import barebones.event.GetTimeCommand;
import barebones.event.QuitCommand;
import barebones.event.SaveCommand;
import barebones.event.RestoreCommand;
import barebones.event.DropCommand;
import barebones.event.OpenCommand;
import barebones.event.TakeCommand;
import barebones.event.ExamineCommand;
import barebones.event.PushCommand;
import barebones.event.PullCommand;
import barebones.event.SayCommand;

import barebones.world.object.Room;

@SuppressWarnings("all")
public class DefaultInterpreter implements DefaultInterpreterConstants {
  public static void main(String args[]) throws ParseException {
    DefaultInterpreter parser = null;
    while (true) {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \u005c"1+(2+3)*4;\u005c" :");
                BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
                String input = "";
                try {
                        input = reader.readLine();
                }
                catch(IOException ioe) {
                        System.out.println("Could not read input");
                }
                ByteArrayInputStream bastream = new ByteArrayInputStream(input.getBytes());

                if (null == parser)
                    parser = new DefaultInterpreter(bastream);
                else
                        parser.ReInit(bastream);

      try {
        UserCommand cmd = parser.interpret();
        System.out.println(cmd.toString());
      } catch (Exception e) {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        parser.ReInit(System.in);
      } catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  final public UserCommand interpret() throws ParseException {
        Concept c;
        DirectionConcept mvDir;
        IdentifierConcept id;
        ItemConcept item;
        FeatureConcept feature;
        StatementConcept statement;
    if (jj_2_1(2)) {
      mvDir = move();
    {if (true) return new MoveCommand(mvDir);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INV_CMD:
        inventory();
        {if (true) return new GetInventoryCommand();}
        break;
      case TIME_CMD:
        time();
    {if (true) return new GetTimeCommand();}
        break;
      case QUIT_CMD:
        quit();
    {if (true) return new QuitCommand();}
        break;
      case SAVE_CMD:
        id = save();
    {if (true) return new SaveCommand(id);}
        break;
      case REST_CMD:
        id = restore();
        {if (true) return new RestoreCommand(id);}
        break;
      case DROP_CMD:
        item = drop();
    {if (true) return new DropCommand(item);}
        break;
      case OPEN_CMD:
        c = open();
    if (ItemConcept.class.isInstance(c)) {if (true) return new OpenCommand((ItemConcept)c);}
    else {if (true) return new OpenCommand((DirectionConcept)c);}
        break;
      case TAKE_CMD:
        item = take();
        {if (true) return new TakeCommand(item);}
        break;
      case EXAM_CMD:
        c = examine();
    if (null == c) {if (true) return new ExamineCommand();}
    else if (DirectionConcept.class.isInstance(c)) {if (true) return new ExamineCommand((DirectionConcept)c);}
        else {if (true) return new ExamineCommand(new AmbiguousConcept(c));}
        break;
      case PUSH_CMD:
        feature = push();
    {if (true) return new PushCommand(feature);}
        break;
      case PULL_CMD:
        feature = pull();
    {if (true) return new PullCommand(feature);}
        break;
      case SAY_CMD:
        statement = say();
    {if (true) return new SayCommand(statement);}
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public DirectionConcept dir() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NDIR:
      jj_consume_token(NDIR);
                   {if (true) return DirectionConcept.N;}
      break;
    case SDIR:
      jj_consume_token(SDIR);
             {if (true) return DirectionConcept.S;}
      break;
    case EDIR:
      jj_consume_token(EDIR);
             {if (true) return DirectionConcept.E;}
      break;
    case WDIR:
      jj_consume_token(WDIR);
             {if (true) return DirectionConcept.W;}
      break;
    case UDIR:
      jj_consume_token(UDIR);
             {if (true) return DirectionConcept.U;}
      break;
    case DDIR:
      jj_consume_token(DDIR);
             {if (true) return DirectionConcept.D;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String dirText() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NDIR:
      t = jj_consume_token(NDIR);
               {if (true) return Room.NORTH;}
      break;
    case SDIR:
      t = jj_consume_token(SDIR);
               {if (true) return Room.SOUTH;}
      break;
    case EDIR:
      t = jj_consume_token(EDIR);
               {if (true) return Room.EAST;}
      break;
    case WDIR:
      t = jj_consume_token(WDIR);
               {if (true) return Room.WEST;}
      break;
    case UDIR:
      t = jj_consume_token(UDIR);
               {if (true) return Room.UP;}
      break;
    case DDIR:
      t = jj_consume_token(DDIR);
               {if (true) return Room.DOWN;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Concept id() throws ParseException {
  Token t;
  Concept c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID_CONCEPT:
      t = jj_consume_token(ID_CONCEPT);
                     {if (true) return new IdentifierConcept(t.image);}
      break;
    case ITEM_WORD:
      t = jj_consume_token(ITEM_WORD);
                    {if (true) return new IdentifierConcept(t.image);}
      break;
    case NDIR:
    case SDIR:
    case EDIR:
    case WDIR:
    case UDIR:
    case DDIR:
      c = dir();
            {if (true) return c;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String rawText() throws ParseException {
  Token t;
  String text;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ITEM_WORD:
      t = jj_consume_token(ITEM_WORD);
                    {if (true) return t.image;}
      break;
    case NDIR:
    case SDIR:
    case EDIR:
    case WDIR:
    case UDIR:
    case DDIR:
      text = dirText();
                   {if (true) return text;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String sentence() throws ParseException {
  StringBuffer termimage = new StringBuffer();
  String s;
    s = rawText();
        termimage.append(s);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NDIR:
      case SDIR:
      case EDIR:
      case WDIR:
      case UDIR:
      case DDIR:
      case ITEM_WORD:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
      s = rawText();
        termimage.append(" ");
                termimage.append(s);
    }
  {if (true) return termimage.toString();}
    throw new Error("Missing return statement in function");
  }

  final public ItemConcept item() throws ParseException {
  String sentence;
    sentence = sentence();
    {if (true) return new ItemConcept(sentence);}
    throw new Error("Missing return statement in function");
  }

  final public Concept dirOrItem() throws ParseException {
  DirectionConcept dir;
  ItemConcept item;
    if (jj_2_2(2)) {
      dir = dir();
    {if (true) return dir;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NDIR:
      case SDIR:
      case EDIR:
      case WDIR:
      case UDIR:
      case DDIR:
      case ITEM_WORD:
        item = item();
        {if (true) return item;}
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public DirectionConcept move() throws ParseException {
    DirectionConcept mvDir;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOVE_CMD:
      jj_consume_token(MOVE_CMD);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    mvDir = dir();
    {if (true) return mvDir;}
    throw new Error("Missing return statement in function");
  }

  final public void inventory() throws ParseException {
    jj_consume_token(INV_CMD);
  }

  final public void time() throws ParseException {
    jj_consume_token(TIME_CMD);
  }

  final public void quit() throws ParseException {
    jj_consume_token(QUIT_CMD);
  }

  final public IdentifierConcept save() throws ParseException {
        Concept concept;
    jj_consume_token(SAVE_CMD);
    concept = id();
    if (concept instanceof IdentifierConcept)
            {if (true) return (IdentifierConcept)concept;}
        else
                {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public IdentifierConcept restore() throws ParseException {
        Concept concept;
    jj_consume_token(REST_CMD);
    concept = id();
    if (concept instanceof IdentifierConcept)
                {if (true) return (IdentifierConcept)concept;}
        else
                {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public ItemConcept drop() throws ParseException {
  ItemConcept item;
    jj_consume_token(DROP_CMD);
    item = item();
    {if (true) return item;}
    throw new Error("Missing return statement in function");
  }

  final public Concept open_object() throws ParseException {
  Concept c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOOR_TO_THE:
      jj_consume_token(DOOR_TO_THE);
      c = dir();
    {if (true) return c;}
      break;
    case NDIR:
    case SDIR:
    case EDIR:
    case WDIR:
    case UDIR:
    case DDIR:
    case ITEM_WORD:
      c = dirOrItem();
    {if (true) return c;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Concept open() throws ParseException {
  Concept c;
  DirectionConcept dir;
  ItemConcept item;
    jj_consume_token(OPEN_CMD);
    c = open_object();
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public ItemConcept take() throws ParseException {
  ItemConcept item;
    jj_consume_token(TAKE_CMD);
    item = item();
        {if (true) return item;}
    throw new Error("Missing return statement in function");
  }

  final public FeatureConcept push() throws ParseException {
  String sentence;
  FeatureConcept feature;
    jj_consume_token(PUSH_CMD);
    sentence = sentence();
    {if (true) return new FeatureConcept(sentence);}
    throw new Error("Missing return statement in function");
  }

  final public FeatureConcept pull() throws ParseException {
  String sentence;
  FeatureConcept feature;
    jj_consume_token(PULL_CMD);
    sentence = sentence();
    {if (true) return new FeatureConcept(sentence);}
    throw new Error("Missing return statement in function");
  }

  final public StatementConcept say() throws ParseException {
  String sentence;
  StatementConcept statement;
    jj_consume_token(SAY_CMD);
    sentence = sentence();
    {if (true) return new StatementConcept(sentence);}
    throw new Error("Missing return statement in function");
  }

  final public Concept examine() throws ParseException {
  ItemConcept item=null;
    jj_consume_token(EXAM_CMD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NDIR:
    case SDIR:
    case EDIR:
    case WDIR:
    case UDIR:
    case DDIR:
    case ITEM_WORD:
      item = item();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
          DirectionConcept dc = DirectionConcept.instance(item.toString());
          if (null == dc)
                {if (true) return new AmbiguousConcept(item,
                        new FeatureConcept(item.toString()),
                        new PersonConcept(item.toString()));}
          else
                {if (true) return dc;}
    throw new Error("Missing return statement in function");
  }

  final public int one_line() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case CONSTANT:
    case 34:
      sum();
      jj_consume_token(33);
              {if (true) return 0;}
      break;
    case 33:
      jj_consume_token(33);
              {if (true) return 1;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void sum() throws ParseException {
    term();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      term();
    }
  }

  final public void term() throws ParseException {
    unary();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      unary();
    }
  }

  final public void unary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      element();
      break;
    case CONSTANT:
    case 34:
      element();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void element() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
      jj_consume_token(CONSTANT);
      break;
    case 34:
      jj_consume_token(34);
      sum();
      jj_consume_token(35);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(NDIR)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(DDIR)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(UDIR)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(WDIR)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(EDIR)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(SDIR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public DefaultInterpreterTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3ffc0,0xfc0000,0xfc0000,0x3fc0000,0x1fc0000,0x1fc0000,0x1fc0000,0x20,0x5fc0000,0x1fc0000,0x90000000,0x18000000,0x18000000,0x60000000,0x60000000,0x90000000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x4,0x4,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public DefaultInterpreter(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DefaultInterpreter(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DefaultInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DefaultInterpreter(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DefaultInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DefaultInterpreter(DefaultInterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DefaultInterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[36];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
